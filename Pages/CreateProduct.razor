@page "/FormsValidation"
@using Estanteria.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Http

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Estanteria.Data.ApplicationDbContext _context
@using System;  
@using System.IO;  
@using System.Threading.Tasks;  

@inject IWebHostEnvironment Environment

@* @attribute [Authorize(Roles = "Admin")] *@

@if (logged)
{
    <h2>Nuevo producto</h2>
    <EditForm Model="@editContext" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>
            <label>
                Name:
                <InputText @bind-Value="product.Name" />
            </label>
        </p>
        <p>
            <label>
                Price:
                <InputNumber @bind-Value="product.Price" />
            </label>
        </p>
        @* <p>
            <label>
            Primary Classification:
            <InputSelect @bind-Value="starship.Classification">
            <option value="">Select classification ...</option>
            <option value="Exploration">Exploration</option>
            <option value="Diplomacy">Diplomacy</option>
            <option value="Defense">Defense</option>
            </InputSelect>
            </label>
            </p> *@
        <p>
            <label>
                How many in stock:
                <InputNumber @bind-Value="product.Stock" />
            </label>
        </p>
        <p>
            <label>
                Product picture:
                <InputFile OnChange="@OnInputFileChange" />
            </label>
            <br />
            @picFormat
        </p>
        
        <button type="submit">Submit</button>

    </EditForm>
    @if (imageDataUrls.Count > 0)
    {
    <h4>Images</h4>

    <div class="card" style="width:30rem;">
        <div class="card-body">
            @foreach (var imageDataUrl in imageDataUrls)
            {
                <img class="rounded m-1" src="@imageDataUrl" />
            }
        </div>
    </div>
}
}
else {
    <p><em>You must authenticate in order to see this page.</em></p>
}

@code {
    // private ProductVM productVM = new ProductVM();
    private Product product = new Product();
    private EditContext editContext;
    private bool logged;
    IList<string> imageDataUrls = new List<string>();
    private string filePath = null;
    private Stream ss = null;
    private string picFormat = "";
    protected override async void OnInitialized()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        logged = false;

        // if (user.Identity.IsAuthenticated)
        {
            logged = true;
        }
        editContext = new EditContext(product);
    }
    private async void HandleValidSubmit()
    {
                //string uniqueFileName = UploadedFile(productVM); 
        Product producto;
        try
        {
            // Console.Write("Creando: "+uniqueFileName+" ");
            if (ss != null){
                producto = new Product  
                {  
                    Name = product.Name,  
                    Price = product.Price,
                    Stock = product.Stock,
                    ProductPicture = product.ProductPicture,  
                };
                product = new Product();
                using (var fileStream = new FileStream(filePath, FileMode.Create))  
                {  
                    await ss.CopyToAsync(fileStream);
                    ss = null;  
                }
            }
            else {
                producto = new Product  
                {  
                    Name = product.Name,  
                    Price = product.Price,
                    Stock = product.Stock,                      
                }; 
            }
            _context.Products.Add(producto);
            await _context.SaveChangesAsync();
            product = new Product();
            
        }
        catch
        {
            base.StateHasChanged();
        }

        //var isValid = editContext.Validate();        
    }


    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {        
        var imageFile = e.File;
        string extension = System.IO.Path.GetExtension(imageFile.Name);      
        string [] acceptedFormats = {".jpg", ".png", ".jpeg"};
        
        if (acceptedFormats.Contains(extension)){
            Console.WriteLine("SÃ­ exta!! "+"image/"+extension.Remove(0,1));
            int size = imageFile.Name.Length;
            // ss =  imageFile.OpenReadStream();    
            // resize de la imagen original
            var resizedImageFile = await imageFile.RequestImageFileAsync("image/"+extension.Remove(0,1), 300, 300);
            ss = resizedImageFile.OpenReadStream();
            string uploadsFolder = Path.Combine(Environment.WebRootPath, "images");            
            string uniqueFileName = Guid.NewGuid().ToString()+ "_" + imageFile.Name;  
            filePath = Path.Combine(uploadsFolder, uniqueFileName); 
            // Console.WriteLine("filePath: "+filePath);
            product.ProductPicture = uniqueFileName;
            picFormat = "";
        } else {
            picFormat = "Formato invalido. Use jpg, png o no ponga ninguna imagen.";
        }
        
        //productVM.ProfileImage = await imageFile.RequestImageFileAsync();          

        // var maxAllowedFiles = 3;
        // var format = "image/png";
        // UploadedFile(productVM, ss);
        /*foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {*/
            
           /* var resizedImageFile = await imageFile.RequestImageFileAsync(format, 
                100, 100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);            
            var imageDataUrl = 
                $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            Console.WriteLine("La url es: ", imageDataUrl);            
            imageDataUrls.Add(imageDataUrl);
            Console.WriteLine("La url es: "+imageDataUrl);*/

            
        //}
    }


}