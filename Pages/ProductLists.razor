@page "/list"

@using Microsoft.Extensions.Logging;
@using Estanteria.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Hosting
@using System;  
@using System.IO;  

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ListillaService Listilla
@inject ILogger<Counter> logger
@inject Estanteria.Data.ApplicationDbContext _context

@inject IWebHostEnvironment Environment
 
@if (productos == null)
{
    if (!logged)
    {
        <p><em>You must authenticate in order to see this page.</em></p>
    }
    else
    {
        <p><em>Connecting with database...</em></p>
    }
}
else
{
    <table class="table table-bordered">
        <tbody>
    @for (int i = 0; i <= @rows; i++)
    {
        <tr>
            @for(int j=0; j < @cols; j++){
                @if (element < productos.Length){
                    <td>
                        <Cell Name=@productos[@element].Name Price=@productos[@element].Price 
                              Stock=@productos[@element].Stock Picture=@fullPath(productos[@element].ProductPicture) 
                              Idd=@productos[@element].Id />
                        
                    </td>
                    increment();
                }            
            }
        </tr>
    }
        </tbody>
    </table>

    
}

@code {
    private Product[] productos;
    private bool logged;
    int cols = 4;
    int rows = 0;
    int element = 0;

    void increment (){
        element++;
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        productos = null;
        logged = false;

        // Console.WriteLine("role? "+user.ToString());
        // if (user.Identity.IsAuthenticated)
        {
            // logger.LogWarning("Autenticado!!");
            logged = true;
            //forecasts = await Listilla.GetForecastAsync(DateTime.Now);
            try
            {
                productos = _context.Products.ToArray();
                rows = (int)productos.Length/4;
                Console.WriteLine("Número de filas es "+rows);
                /*foreach (Product i in productos)
                {
                    Console.WriteLine("Pdocusto: " + i.Name + ", "+i.Price+", "+i.Stock+", "+fullPath(i.ProductPicture));
                    
                }*/
            }
            catch
            {
                base.StateHasChanged();
            }
        }

    }

    protected string fullPath(string filename){
        // Console.WriteLine("Fullpath con entrada: "+filename);
        if (filename==null)
            return null;
        //string uploadsFolder = Path.Combine(Environment.WebRootPath, "images");
        string uploadsFolder = "https://localhost:5001/images/";
        return Path.Combine(uploadsFolder, filename); 
        //return Path.Combine("file:///", Path.Combine(uploadsFolder, filename)) ;
    }

    protected async void deleteProduct(){
        var produ = new Product { Id = 2 };
        _context.Remove(produ);
        var res = await _context.SaveChangesAsync();
                //return NoContent();
    }
    
}
