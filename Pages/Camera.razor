@page "/Camera"

@using BlazorMedia
@using BlazorMedia.Models
@using Estanteria.Data
@using Estanteria.Pages

@* @inherits IndexViewModel *@



<div>
    FPS: @FPS, KBps: @KBps
</div>
<div style="display: flex; flex-direction: row; width: calc(100vw - 280px);">
    @if (SelectedCamera.Length > 0)
    {
        @* <VideoMedia Style="flex-basis: 50%; width: 50%;" 
             Timeslice="100" CameraDeviceId="@SelectedCamera" Width="640" Height="480"></VideoMedia> *@
        <VideoMedia
            @ref="VideoMediaComponent"
            Style="flex-basis: 50%; width: 50%;"
            OnData="OnData"
            OnError="OnError"
            OnFPS="OnFPS"
            OnInitialize="OnInitialize"
            Timeslice="100"
            Width="@Width"
            Height="@Height"
            RecordAudio="true"
            CameraDeviceId="@SelectedCamera"
            MicrophoneDeviceId="@SelectedMicrophone"
            Framerate="@Framerate" />
    }
    <img src="@PictureData" style="flex-basis: 50%; width: 50%;" />
</div>
<div>
    <button @onclick="OnTakePhotoPressed">Take Photo</button>
    <button @onclick="OnToggleRecordingPressed">Reload</button>
</div>
<div>
    <label for="framerate">Framerate: </label>
    <input type="text" @bind-value="Framerate" />
</div>
<div>
    <label for="quality">Quality: </label>
    <select id="quality" value="@SelectedQuality" @onchange="OnQualitySelected">
        <option value="320x240">240p</option>
        <option value="480x360">360p</option>
        <option value="858x480">480p</option>
        <option value="1280x720">720p</option>
        <option selected value="1920x1080">1080p</option>
        <option value="3860x2160">4K</option>
    </select>
    <p>Selected Quality:@SelectedQuality</p>
    <p>Effective Quality: @($"{EffectiveWidth}x{EffectiveHeight}")</p>
</div>
@if (Cameras.Count > 0)
{
    <div>
        <label for="cameras">Cameras: </label>
        <select id="cameras" value="@SelectedCamera" @onchange="OnCameraSelected">
            @foreach (MediaDeviceInfo mdi in Cameras)
            {
                <option value="@mdi.DeviceId">@mdi.Name</option>
            }
        </select>
        <p>Selected Camera:@(SelectedCamera)</p>
    </div>
}
@if (Microphones.Count > 0)
{
    <div>
        <label for="microphones">Microphones: </label>
        <select id="microphones" value="@SelectedMicrophone" @onchange="OnMicrophoneSelected">
            @foreach (MediaDeviceInfo mdi in Microphones)
            {
                <option value="@mdi.DeviceId">mdi.Name</option>
            }
        </select>
        <p>Selected Microphone:@(SelectedMicrophone)</p>
    </div>
}

@code{

    @using System;
    @using System.Collections.Generic;
    @using System.Threading.Tasks;
    @using Microsoft.AspNetCore.Components;
    @using Microsoft.JSInterop;




    /*public class IndexViewModel : ComponentBase, IDisposable
{*/

    [Inject]
    public IJSRuntime JSRuntime { get; set; }
    public VideoMedia VideoMediaComponent { get; set; }
    public bool IsRecording = false;
    public List<MediaDeviceInfo> Cameras = new List<MediaDeviceInfo>();
    public List<MediaDeviceInfo> Microphones = new List<MediaDeviceInfo>();
    public string SelectedCamera { get; set; } = string.Empty;
    public string SelectedMicrophone { get; set; } = string.Empty;
    public string SelectedQuality { get; set; } = "1080p";
    public BlazorMediaAPI BlazorMediaAPI { get; set; }
    public int Width { get; set; } = 1920;
    public int EffectiveWidth { get; set; }
    public int Height { get; set; } = 1080;
    public int EffectiveHeight { get; set; }
    public int Framerate { get; set; } = 30;
    public int FPS { get; set; }
    public int KBps { get; set; }
    public int BytesInSecond { get; set; }
    public DateTime lastBitRateData { get; set; } = DateTime.Now;
    public string PictureData { get; set; }
    protected override async Task OnInitializedAsync()
    {
        BlazorMediaAPI = new BlazorMediaAPI(JSRuntime);
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Should call this before listening to device changes.
            await BlazorMediaAPI.StartDeviceChangeListenerAsync();
            await FetchDeviceListAsync();
            BlazorMediaAPI.DeviceChanged += BlazorMedia_DeviceChanged;
        }
        await base.OnAfterRenderAsync(firstRender);
        await InvokeAsync(StateHasChanged);
    }

    public void OnData(byte[] data)
    {
        if (DateTime.Now - lastBitRateData >= TimeSpan.FromSeconds(1))
        {
            lastBitRateData = DateTime.Now;
            KBps = (KBps + (BytesInSecond / 1000)) / 2;
            BytesInSecond = 0;
        }
        BytesInSecond += data.Length;
    }

    public void OnError(MediaError error)
    {
        Console.WriteLine(error.Message);
    }

    public async void OnFPS(int fps)
    {
        FPS = fps;
        await InvokeAsync(StateHasChanged);
    }

    public async void OnInitialize(MediaStartEventArgs e)
    {
        EffectiveWidth = e.Width;
        EffectiveHeight = e.Height;
        await InvokeAsync(StateHasChanged);
    }

    public async Task FetchDeviceListAsync()
    {
        var Devices = await BlazorMediaAPI.EnumerateMediaDevices();
        Console.Write("Buscando dsposi");
        foreach (MediaDeviceInfo mdi in Devices)
        {
            Console.Write("Uno !");
            if (mdi.Kind == MediaDeviceKind.AudioInput)
            {
                Microphones.Add(mdi);
            }
            if (mdi.Kind == MediaDeviceKind.VideoInput)
            {
                Cameras.Add(mdi);
            }
        }
        Console.Write("Selected camera1",SelectedCamera);
        if (Microphones.Count > 0)
        {
            SelectedMicrophone = Microphones[0].DeviceId;
        }
        if (Cameras.Count > 0)
        {
            SelectedCamera = Cameras[0].DeviceId;
        }
    }

    public async void OnCameraSelected(ChangeEventArgs e)
    {
        SelectedCamera = e.Value.ToString();
        Console.WriteLine("Selectedcamera2 ", SelectedCamera);
        await InvokeAsync(StateHasChanged);
    }
    public async void OnMicrophoneSelected(ChangeEventArgs e)
    {
        SelectedMicrophone = e.Value.ToString();
        await InvokeAsync(StateHasChanged);
    }
    public async void OnQualitySelected(ChangeEventArgs e)
    {
        SelectedQuality = e.Value.ToString();
        Width = int.Parse(SelectedQuality.Split("x")[0]);
        Height = int.Parse(SelectedQuality.Split("x")[1]);
        await InvokeAsync(StateHasChanged);
    }
    public async void OnToggleRecordingPressed()
    {
        await VideoMediaComponent.ReloadAsync();
    }

    public async void OnTakePhotoPressed()
    {
        PictureData = await VideoMediaComponent.CaptureImageAsync();
        await InvokeAsync(StateHasChanged);
    }

    public void BlazorMedia_DeviceChanged(object sender, DeviceChangeEventArgs e)
    {
        Console.WriteLine("Total removedDevices:" + e.RemovedDevices.Count);
        foreach (var device in e.RemovedDevices)
        {
            Console.WriteLine(device.Name);
        }

        Console.WriteLine("Total AddedDevices:" + e.AddedDevices.Count);
        foreach (var device in e.AddedDevices)
        {
            Console.WriteLine(device.Name);
        }
    }

    public void Dispose()
    {
        // BlazorMediaAPI.DeviceChanged -= BlazorMedia_DeviceChanged;
    }
    // }
}